
set(LIBs pthread)

cmake_minimum_required (VERSION 2.8)

SET(CMAKE_C_COMPILER "/usr/local/bin/gcc")
SET(CMAKE_CXX_COMPILER "/usr/local/bin/g++")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -Wl,-rpath=/opt/HongClusterMgt/sbin")
#set(CMAKE_SOURCE_DIR "$HOME/GitHub/PCMM/sourceCode")
#set(CMAKE_BINARY_DIR "$HOME/GitHub/PCMM/build")
#include(CheckCXXCompilerFlag)
#	CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
#	CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
#if(COMPILER_SUPPORTS_CXX11)
#	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
#elseif(COMPILER_SUPPORTS_CXX0X)
#	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
#else()
#    message(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11
#					support. Please use a different C++ compiler.")
#endif()
#set rpath
SET(CMAKE_INSTALL_PREFIX "/usr/local")
# use, i.e. don't skip the full RPATH for the build tree
SET(CMAKE_SKIP_BUILD_RPATH FALSE)

# when building, don't use the install RPATH already
# (but later on when installing)
SET(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)

SET(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib64")
#SET(CMAKE_INSTALL_RPATH "/usr/local/lib64")
#SET(CMAKE_RPATH "/usr/local/lib64")

# add the automatically determined parts of the RPATH
# which point to directories outside the build tree to the install RPATH
SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

# the RPATH to be used when installing, but only if it's not a system directory
LIST(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES "${CMAKE_INSTALL_PREFIX}/lib64" isSystemDir)
IF("${isSystemDir}" STREQUAL "-1")
    SET(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib64")
ENDIF("${isSystemDir}" STREQUAL "-1")
message("CMAKE_INSTALL_RPATH=${CMAKE_INSTALL_RPATH}")
add_subdirectory(Configure)
add_subdirectory(Common)
#add_subdirectory(SshWrapper)
#add_subdirectory(libssh_demo)
add_subdirectory(EventHandler)
add_subdirectory(TimerHandler)
add_subdirectory(Network)
add_subdirectory(Serialize)
add_subdirectory(Io)
add_subdirectory(PlatformWrapper)
add_subdirectory(Ipc)
add_subdirectory(IpcMessage)
#add_subdirectory(Connection)
add_subdirectory(Environment)
add_subdirectory(Core)
add_subdirectory(ConfigureManagement)
add_subdirectory(SystemMonitorMessage)
add_subdirectory(ShellCommandMessage)
add_subdirectory(SystemMonitor)
add_subdirectory(ClusterManagement)
message("PCMM_ENABLE_TEST: ${PCMM_ENABLE_TEST}")
#Unit test
IF(PCMM_ENABLE_TEST)
    message("testing!")
    enable_testing()
    find_package(GTest REQUIRED)
    message("GTEST_INCLUDE_DIRS: ${GTEST_INCLUDE_DIRS}")	
    include_directories($GTEST_INCLUDE_DIRS)
    message("GTEST_BOTH_LIBRARIES: ${GTEST_BOTH_LIBRARIES},  ${GTEST_LIBRARIES}")
    set(TEST_LIBs ${LIBs} ${GTEST_BOTH_LIBRARIES})
    #set(TEST_LIBs ${LIBs} gtest gmock gtest_main gmock_main)
    #message("lib ${CMAKE_LIBRARY_PATH} ---- ${CMAKE_SYSTEM_LIBRARY_PATH} ---
    #		${CMAKE_INCLUDE_PATH} ---- ${CMAKE_SYSTEM_INCLUDE_PATH}")
    add_subdirectory(ConfigureTest)
    add_subdirectory(TraceLogTest)
    #add_subdirectory(SshWrapperTest)
    add_subdirectory(SerializeTest)
    add_subdirectory(NetworkTest)
    add_subdirectory(EnvironmentTest)
    add_subdirectory(SystemMonitorMessageTest)
ENDIF()
